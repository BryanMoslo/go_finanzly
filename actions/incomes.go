package actions

import (
	"github.com/BryanMoslo/go_finanzly/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Income)
// DB Table: Plural (incomes)
// Resource: Plural (Incomes)
// Path: Plural (/incomes)
// View Template Folder: Plural (/templates/incomes/)

// IncomesResource is the resource for the Income model
type IncomesResource struct {
	buffalo.Resource
}

// List gets all Incomes. This function is mapped to the path
// GET /incomes
func (v IncomesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	incomes := &models.Incomes{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Incomes from the DB
	if err := q.All(incomes); err != nil {
		return errors.WithStack(err)
	}

	// Make Incomes available inside the html template
	c.Set("incomes", incomes)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("incomes/index.html"))
}

// Show gets the data for one Income. This function is mapped to
// the path GET /incomes/{income_id}
func (v IncomesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Income
	income := &models.Income{}

	// To find the Income the parameter income_id is used.
	if err := tx.Find(income, c.Param("income_id")); err != nil {
		return c.Error(404, err)
	}

	// Make income available inside the html template
	c.Set("income", income)

	return c.Render(200, r.HTML("incomes/show.html"))
}

// New renders the form for creating a new Income.
// This function is mapped to the path GET /incomes/new
func (v IncomesResource) New(c buffalo.Context) error {
	// Make income available inside the html template
	c.Set("income", &models.Income{})

	return c.Render(200, r.HTML("incomes/new.html"))
}

// Create adds a Income to the DB. This function is mapped to the
// path POST /incomes
func (v IncomesResource) Create(c buffalo.Context) error {
	// Allocate an empty Income
	income := &models.Income{}

	// Bind income to the html form elements
	if err := c.Bind(income); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(income)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make income available inside the html template
		c.Set("income", income)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("incomes/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Income was created successfully")

	// and redirect to the incomes index page
	return c.Redirect(302, "/incomes/%s", income.ID)
}

// Edit renders a edit form for a Income. This function is
// mapped to the path GET /incomes/{income_id}/edit
func (v IncomesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Income
	income := &models.Income{}

	if err := tx.Find(income, c.Param("income_id")); err != nil {
		return c.Error(404, err)
	}

	// Make income available inside the html template
	c.Set("income", income)
	return c.Render(200, r.HTML("incomes/edit.html"))
}

// Update changes a Income in the DB. This function is mapped to
// the path PUT /incomes/{income_id}
func (v IncomesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Income
	income := &models.Income{}

	if err := tx.Find(income, c.Param("income_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Income to the html form elements
	if err := c.Bind(income); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(income)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make income available inside the html template
		c.Set("income", income)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("incomes/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Income was updated successfully")

	// and redirect to the incomes index page
	return c.Redirect(302, "/incomes/%s", income.ID)
}

// Destroy deletes a Income from the DB. This function is mapped
// to the path DELETE /incomes/{income_id}
func (v IncomesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Income
	income := &models.Income{}

	// To find the Income the parameter income_id is used.
	if err := tx.Find(income, c.Param("income_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(income); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Income was destroyed successfully")

	// Redirect to the incomes index page
	return c.Redirect(302, "/incomes")
}
